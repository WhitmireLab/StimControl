classdef (HandleCompatible) DAQ < HardwareComponent
    %UNTITLED2 Summary of this class goes here
    %   Detailed explanation goes here

    properties
        Name
        Params
        IsValid
    end

    methods
        function obj = DAQ(varargin)
            % https://au.mathworks.com/help/matlab/ref/inputparser.html
            obj.IsValid = true;

            p = inputParser;
            addOptional(p, 'name', '', @isstring);
            addOptional(p, 'paramfile','', @isstring);
            parse(p, varargin{:});
            if isempty(p.Results.name)
                obj.FindDaqs();
            else
                
            end
            obj.Name = p.Results.name;
            obj.Params = p.Results.paramfile;
        end

        % Initialise device
        function Initialise(obj, varargin)
            disp('Creating DAQ session ...')
            obj = daq('ni');
            obj.DAQ.Rate = 1000;
            obj.createDAQchannels
            disp(' ')
            disp(obj.DAQ.Channels)
            disp(' ')
        end

        % Close device
        function Close(obj)

        end
        
        % Start device
        function StartSession(obj)

        end

        %Stop device
        function StopSession(obj)

        end

        % Change device parameters
        function ChangeParams(obj, varargin)

        end

        % get current device parameters for saving
        function result = GetSaveableParams(obj)

        end
        
        % Gets output since last queried
        function result = GetOutput(obj)

        end
        
        % Gets all output since session started
        function result = GetSessionOutput(obj)

        end
        
        % load in a saved set of parameters
        function SetParamsFromFile(obj, filename)

        end

        % Print device information
        function PrintInfo(obj)

        end

        %%% PRIVATE FUNCTIONS %%%

        function FindDaqs(obj)
            % https://au.mathworks.com/help/daq/daq.interfaces.dataacquisition.html
            try
                daqs = daqlist().DeviceInfo;
            catch
                daqs = [];
            end
            if isempty(daqs)
                errorStruct.message = "No D or "
            end

        end
    end
end

        function CheckDAQ(app)
            % https://au.mathworks.com/help/daq/daq.interfaces.dataacquisition.html
            % check NI card
            if length(app.DaqName.Items) == 1
                if ~isempty(daqlist())
                    dList = daqlist().DeviceInfo;
                    dNames = {};
                    dNames{1} = 'none';
                    for i = 1:length(dList)
                        dNames{i+1} = dList(i).ID;
                    end
                    app.DaqName.Items = dNames;
                else
                    dNames = {};
                    dNames{1} = 'none';
                    app.DaqName.Items = dNames;
                    disp("No DAQs detected.");
                    app.DaqName.Value = 'none';
                end
            end
            daqName = app.DaqName.Value;
            if daqName == 'none'
                app.dNIdevice = [];
                return
            end
            try
                daqs = daqlist().DeviceInfo;
            catch
                daqs = [];
            end

            if isempty(daqs)
                disp('No NI devices found or data acquisition toolbox missing.')
                disp('Use software triggers instead.')
                app.dNIdevice = [];
            else
                try
                    if isfield(app, 'dNIdevice')
                        delete(app.dNIdevice);
                        delete(app.aNIdevice);
                    end
                    daqs = daqlist().DeviceInfo;
                    correctIndex = 0;
                    checker = false; %check if daq device with correct ID is present. Default is 'Dev1'
                    for x = 1 : length(daqs)
                        if strcmpi(daqs(x).ID,daqName)
                            checker = true;
                            correctIndex = x;
                        end
                    end
                    if ~checker
                        warning(['Could not find specified DAQ: ' daqName ' - Using existing board ' daqs(x).ID ' instead.'])
                        daqName = daqs(x).ID;
                        app.DaqName.Value = daqs(x).ID;
                        correctIndex = x;
                    end
    
                    %Initialise DAQ with correct settings. TODO make sure this is accurate
                    app.dNIdevice = daq(daqs(correctIndex).Vendor.ID); %object for communication with DAQ - digital lines
                    app.aNIdevice = daq(daqs(correctIndex).Vendor.ID); %object for communication with DAQ - analog lines
                    % app.aNIdevice.IsContinuous = true; %set to continous acquisition
                    app.aNIdevice.Rate = 1000; %set sampling rate to 1kHz
                    switch app.CaptureMode.Value
                        case "Active"
                            % app.dNIdevice.addinput(daqName, 'port0/line0', "Digital");
                            app.dNIdevice.addoutput(daqName, "port0/line4", "Digital");
                            app.dNIdevice.addoutput(daqName, "port1/line4", "Digital");
                            app.dNIdevice.ScansAvailableFcn = @app.DigitalScansAvailable;
                            app.dNIdevice.ScansAvailableFcnCount = 100; %TODO MIGHT BE TOO SMALL (fast)
                            addclock(app.dNIdevice,"ScanClock","External","Dev1/PFI0");
                            try
                                app.dNIdevice.start();
                            end
                            % app.dNIdevice.write(0); %make sure outputs are set to 0 to start.
                            % app.aNIdevice.ScansAvailableFcn = @app.AnalogScansAvailable;
                        case "Passive"
                    end
                catch
                    disp('Error with setting up NI Device.')
                    disp('Use software triggers instead.')
                    app.dNIdevice = [];
                end